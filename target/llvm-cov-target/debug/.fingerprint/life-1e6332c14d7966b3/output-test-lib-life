{"$message_type":"diagnostic","message":"lifetime flowing from input to output with different syntax can be confusing","code":{"code":"mismatched_lifetime_syntaxes","explanation":null},"level":"warning","spans":[{"file_name":"src/life/cells.rs","byte_start":1231,"byte_end":1236,"line_start":56,"line_end":56,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn iter(&self) -> hash_set::Iter<Cell> {","highlight_start":17,"highlight_end":22}],"label":"this lifetime flows to the output","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/life/cells.rs","byte_start":1241,"byte_end":1261,"line_start":56,"line_end":56,"column_start":27,"column_end":47,"is_primary":false,"text":[{"text":"    pub fn iter(&self) -> hash_set::Iter<Cell> {","highlight_start":27,"highlight_end":47}],"label":"the lifetime gets resolved as `'_`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(mismatched_lifetime_syntaxes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"one option is to remove the lifetime for references and use the anonymous lifetime for paths","code":null,"level":"help","spans":[{"file_name":"src/life/cells.rs","byte_start":1256,"byte_end":1256,"line_start":56,"line_end":56,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn iter(&self) -> hash_set::Iter<Cell> {","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":"'_, ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null},{"message":"one option is to consistently use `'_`","code":null,"level":"help","spans":[{"file_name":"src/life/cells.rs","byte_start":1232,"byte_end":1232,"line_start":56,"line_end":56,"column_start":18,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn iter(&self) -> hash_set::Iter<Cell> {","highlight_start":18,"highlight_end":18}],"label":null,"suggested_replacement":"'_ ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/life/cells.rs","byte_start":1256,"byte_end":1256,"line_start":56,"line_end":56,"column_start":42,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn iter(&self) -> hash_set::Iter<Cell> {","highlight_start":42,"highlight_end":42}],"label":null,"suggested_replacement":"'_, ","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: lifetime flowing from input to output with different syntax can be confusing\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/life/cells.rs:56:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iter(&self) -> hash_set::Iter<Cell> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe lifetime gets resolved as `'_`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis lifetime flows to the output\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(mismatched_lifetime_syntaxes)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: one option is to remove the lifetime for references and use the anonymous lifetime for paths\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn iter(&self) -> hash_set::Iter<\u001b[0m\u001b[0m\u001b[38;5;10m'_, \u001b[0m\u001b[0mCell> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m+++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
